pipeline {
    agent { label 'myAgent0' }
    parameters {
        choice(name: 'ENV', choices: ['dev', 'test', 'prod',"release"])
    } 
    stages {
        stage('build') {
            steps {
                echo 'building on myAgent 0'
                script{
                    if (params.ENV == "release") {
                        withCredentials([usernamePassword(credentialsId: 'DockerHub-Account', usernameVariable: 'mostafa_username', passwordVariable: 'mostafa_pass')]) {
                            sh '''
                                docker login -u ${mostafa_username} -p ${mostafa_pass}
                                docker build -t kareemelkasaby/bakehouseitismart:v${BUILD_NUMBER} .
                                docker push kareemelkasaby/bakehouseitismart:v${BUILD_NUMBER}
                                echo ${BUILD_NUMBER} > ../build.txt
                            '''
                        }
                    }
                    else {
                        echo "user choosed ${params.ENV}"
                    }
                }
            }
        }
        // stage('deploy') {
        //     steps {
        //         echo 'deploy'
        //         script {
        //             if (params.ENV == "dev" || params.ENV == "test" || params.ENV == "prod") {
        //                 withCredentials([file(credentialsId: 'iti-samrt-kubeconfig', variable: 'KUBECONFIG_ITI')]) {
        //                     sh '''
        //                         export BUILD_NUMBER=$(cat ../build.txt)
        //                         mv Deployment/deploy.yaml Deployment/deploy.yaml.tmp
        //                         cat Deployment/deploy.yaml.tmp | envsubst > Deployment/deploy.yaml
        //                         rm -f Deployment/deploy.yaml.tmp
        //                         kubectl apply -f Deployment --kubeconfig ${KUBECONFIG_ITI} -n ${ENV}
        //                     '''
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}
